.. Copyright 2020-2022 Robert Bosch GmbH

.. Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

.. http://www.apache.org/licenses/LICENSE-2.0

.. Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

Get the pytest XML result 
=========================

In order to import the execution result(s), the ***.xml** file which contains 
result of all executed pytest testcases is required.

But that file is not generated by default. The argument `--junit-xml=<log>` 
needs to be specified when executing the pytest to get the generated JUnit XML 
result file at given path.

The example pytest command to get the ***.xml** result file:
::

   pytest --junit-xml=path/to/result.xml pytest/folder

Tool features
=============

Usage
-----

Use below command to get tools\'s usage
::

   PyTestLog2DB -h

The usage should be showed as below:
::

   usage: PyTestLog2DB (PyTestXMLReport to TestResultWebApp importer) [-h] [-v] 
                    [--recursive] [--dryrun] [--append] [--UUID UUID] 
                    [--config CONFIG] resultxmlfile server user password database

   PyTestLog2DB imports pytest JUnit XML report file(s)generated by pytest into 
                    a WebApp database.

   positional arguments:
   resultxmlfile    absolute or relative path to the pytest JUnit XML report 
                    file or directory of report files to be imported.
   server           server which hosts the database (IP or URL).
   user             user for database login.
   password         password for database login.
   database         database schema for database login.

   optional arguments:
   -h, --help       show this help message and exit
   -v               Version of the PyTestLog2DB importer.
   --recursive      if set, then the path is searched recursively for output 
                    files to be imported.
   --dryrun         if set, then verify all input arguments (includes DB connection) 
                    and show what would be done.
   --append         is used in combination with -UUID <UUID>. If set, allow to append 
                    new result(s) to existing execution result UUID in -UUID argument.
   --UUID UUID      UUID used to identify the import and version ID on webapp. 
                    If not provided PyTestLog2DB will generate an UUID for the whole import.
   --config CONFIG  configuration json file for component mapping information.

The below command is simple usage with all required arguments to import PyTest 
results into TestResultWebApp's database:
::

   PyTestLog2DB <resultxmlfile> <server> <user> <password> <database>

Besides the executable file, you can also run tool as a Python module
::

   python -m PyTestLog2DB <resultxmlfile> <server> <user> <password> <database>

Verify provided arguments
-------------------------

Sometimes, we just want to validate the ***.xml** and database connection 
without changing anything in the database, the optional argument `--dryrun` can
be used in this case.

When executing in dryrun mode, PyTestLog2DB will:

* Verify the provided ***.xml** file is valid or not.
* Verify the database connection with provided credential.
* Verify other information which given in optional arguments.
* Just print all test cases will be imported without touching database.

This feature will helps you to ensure that there is no error when executing
PyTestLog2DB tool (normal mode)to create new record(s) and update 
TestResultWebApp's database.

Searching ***.xml** result file(s)
----------------------------------

TODO


Handle missing information
--------------------------

The ***.xml** report file which is generated by PyTest contains only the 
testcase result(s) and less metadata information about the test execution such 
as *project/variant*, *software version*, *tester* , *component*, ... 
which are required by TestResultWebApp.

So that, PyTestLog2DB will handle those information with the default values as 
below:

* *project/variant* : **PyTest**
* *version_sw*      : execution time as *%Y%m%d_%H%M%S* format. E.g **20221128_143547**
* *version_hw*      : **""**
* *version_test*    : **""**
* *component*       : **unknown**
* *testtool*        : current python and pytest version. E.g **PyTest 6.2.5 (Python 3.9.0)**
* *tester*          : current user.

However, those information can be specified in the configuration json file with
option argument `--config CONFIG` when executing import command.

Required type for those information is **string** except the *component*.
Type of *component* info can be:

* **string**: to specify the same *component* for all testcase within this execution.
* **object**: to specify the mapping between *component* info and *classname* of testcase.

Sample configuration json file:
::

   {
      "variant"      : "MyProject",
      "version_sw"   : "0.1.1",
      "component"    : {
         "Testsuite1"      : "test-data.test_tsclass.TestSuite1",
         "Testsuite2"      : "test-data.test_tsclass.TestSuite2",
         "Others"          : [
            "test-data.test_ts1",
            "test-data.test_ts2"
         ]
      },
      "tester"       : "Tran Duy Ngoan"
   }

As above sample configuration, the component mapping can be explained as below:

* Testcase(s) with classname **test-data.test_tsclass.TestSuite1** is belong to component **Testsuite1**
* Testcase(s) with classname **test-data.test_tsclass.TestSuite2** is belong to component **Testsuite2**
* And component **Others** contains all testcases with classnames **test-data.test_ts1** and **test-data.test_ts2**.

With this feature, the importing execution result can be displayed properly
without missing any required information.

Append mode
-----------

TODO

Display on TestResultWebApp
===========================

TODO